// Copyright (c) AI Downloader. All rights reserved.
// <auto-generated />

using System.Text.Json.Serialization;

namespace RodelDownloader.Aria;

public class PeerResult
{
    /// <summary>
    /// true if aria2 is choking the peer. Otherwise false.
    /// </summary>
    [JsonPropertyName("amChoking")]
    public string AmChoking { get; set; }

    /// <summary>
    /// Hexadecimal representation of the download progress of the peer. The highest bit corresponds to the piece at index
    /// 0. Set bits indicate the piece is available and unset bits indicate the piece is missing. Any spare bits at the end
    /// are set to zero.
    /// </summary>
    [JsonPropertyName("bitfield")]
    public string Bitfield { get; set; } = null!;

    /// <summary>
    /// Download speed (byte/sec) that this client obtains from the peer.
    /// </summary>
    [JsonPropertyName("downloadSpeed")]
    public string DownloadSpeed { get; set; }

    /// <summary>
    /// IP address of the peer.
    /// </summary>
    [JsonPropertyName("ip")]
    public string Ip { get; set; } = null!;

    /// <summary>
    /// true if the peer is choking aria2. Otherwise false.
    /// </summary>
    [JsonPropertyName("peerChoking")]
    public string PeerChoking { get; set; }

    /// <summary>
    /// Percent-encoded peer ID.
    /// </summary>
    [JsonPropertyName("peerId")]
    public string PeerId { get; set; } = null!;

    /// <summary>
    /// Port number of the peer.
    /// </summary>
    [JsonPropertyName("port")]
    public string Port { get; set; }

    /// <summary>
    /// true if this peer is a seeder. Otherwise false.
    /// </summary>
    [JsonPropertyName("seeder")]
    public string Seeder { get; set; }

    /// <summary>
    /// Upload speed(byte/sec) that this client uploads to the peer.
    /// </summary>
    [JsonPropertyName("uploadSpeed")]
    public string UploadSpeed { get; set; }
}
